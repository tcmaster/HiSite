package com.android.tonight8.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.tonight8.dao.entity.Org;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORG.
*/
public class OrgDao extends AbstractDao<Org, Long> {

    public static final String TABLENAME = "ORG";

    /**
     * Properties of entity Org.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Intro = new Property(2, String.class, "intro", false, "INTRO");
        public final static Property Logo = new Property(3, String.class, "logo", false, "LOGO");
        public final static Property Pic = new Property(4, String.class, "pic", false, "PIC");
        public final static Property Coordinate = new Property(5, Boolean.class, "coordinate", false, "COORDINATE");
        public final static Property ProvinceCode = new Property(6, String.class, "provinceCode", false, "PROVINCE_CODE");
        public final static Property CityCode = new Property(7, String.class, "cityCode", false, "CITY_CODE");
        public final static Property AreaCode = new Property(8, String.class, "areaCode", false, "AREA_CODE");
        public final static Property Address = new Property(9, String.class, "address", false, "ADDRESS");
        public final static Property Telephone = new Property(10, String.class, "telephone", false, "TELEPHONE");
        public final static Property Email = new Property(11, String.class, "email", false, "EMAIL");
        public final static Property ContactPerson = new Property(12, String.class, "contactPerson", false, "CONTACT_PERSON");
        public final static Property ContactMobilePhone = new Property(13, String.class, "contactMobilePhone", false, "CONTACT_MOBILE_PHONE");
        public final static Property PaperPhoto = new Property(14, String.class, "paperPhoto", false, "PAPER_PHOTO");
        public final static Property PaperCode = new Property(15, String.class, "paperCode", false, "PAPER_CODE");
        public final static Property IdentityType = new Property(16, String.class, "identityType", false, "IDENTITY_TYPE");
        public final static Property IdentityCode = new Property(17, String.class, "identityCode", false, "IDENTITY_CODE");
        public final static Property IdentityPhotoFront = new Property(18, String.class, "identityPhotoFront", false, "IDENTITY_PHOTO_FRONT");
        public final static Property IdentityPhotoReverse = new Property(19, String.class, "identityPhotoReverse", false, "IDENTITY_PHOTO_REVERSE");
    };


    public OrgDao(DaoConfig config) {
        super(config);
    }
    
    public OrgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORG' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'INTRO' TEXT," + // 2: intro
                "'LOGO' TEXT," + // 3: logo
                "'PIC' TEXT," + // 4: pic
                "'COORDINATE' INTEGER," + // 5: coordinate
                "'PROVINCE_CODE' TEXT," + // 6: provinceCode
                "'CITY_CODE' TEXT," + // 7: cityCode
                "'AREA_CODE' TEXT," + // 8: areaCode
                "'ADDRESS' TEXT," + // 9: address
                "'TELEPHONE' TEXT," + // 10: telephone
                "'EMAIL' TEXT," + // 11: email
                "'CONTACT_PERSON' TEXT," + // 12: contactPerson
                "'CONTACT_MOBILE_PHONE' TEXT," + // 13: contactMobilePhone
                "'PAPER_PHOTO' TEXT," + // 14: paperPhoto
                "'PAPER_CODE' TEXT," + // 15: paperCode
                "'IDENTITY_TYPE' TEXT," + // 16: identityType
                "'IDENTITY_CODE' TEXT," + // 17: identityCode
                "'IDENTITY_PHOTO_FRONT' TEXT," + // 18: identityPhotoFront
                "'IDENTITY_PHOTO_REVERSE' TEXT);"); // 19: identityPhotoReverse
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Org entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(3, intro);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(4, logo);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(5, pic);
        }
 
        Boolean coordinate = entity.getCoordinate();
        if (coordinate != null) {
            stmt.bindLong(6, coordinate ? 1l: 0l);
        }
 
        String provinceCode = entity.getProvinceCode();
        if (provinceCode != null) {
            stmt.bindString(7, provinceCode);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(8, cityCode);
        }
 
        String areaCode = entity.getAreaCode();
        if (areaCode != null) {
            stmt.bindString(9, areaCode);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(11, telephone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(12, email);
        }
 
        String contactPerson = entity.getContactPerson();
        if (contactPerson != null) {
            stmt.bindString(13, contactPerson);
        }
 
        String contactMobilePhone = entity.getContactMobilePhone();
        if (contactMobilePhone != null) {
            stmt.bindString(14, contactMobilePhone);
        }
 
        String paperPhoto = entity.getPaperPhoto();
        if (paperPhoto != null) {
            stmt.bindString(15, paperPhoto);
        }
 
        String paperCode = entity.getPaperCode();
        if (paperCode != null) {
            stmt.bindString(16, paperCode);
        }
 
        String identityType = entity.getIdentityType();
        if (identityType != null) {
            stmt.bindString(17, identityType);
        }
 
        String identityCode = entity.getIdentityCode();
        if (identityCode != null) {
            stmt.bindString(18, identityCode);
        }
 
        String identityPhotoFront = entity.getIdentityPhotoFront();
        if (identityPhotoFront != null) {
            stmt.bindString(19, identityPhotoFront);
        }
 
        String identityPhotoReverse = entity.getIdentityPhotoReverse();
        if (identityPhotoReverse != null) {
            stmt.bindString(20, identityPhotoReverse);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Org readEntity(Cursor cursor, int offset) {
        Org entity = new Org( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // intro
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // logo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pic
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // coordinate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // provinceCode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cityCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // areaCode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // telephone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // email
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // contactPerson
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // contactMobilePhone
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // paperPhoto
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // paperCode
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // identityType
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // identityCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // identityPhotoFront
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // identityPhotoReverse
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Org entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIntro(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLogo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCoordinate(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setProvinceCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCityCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAreaCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTelephone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEmail(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setContactPerson(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setContactMobilePhone(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPaperPhoto(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPaperCode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIdentityType(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setIdentityCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIdentityPhotoFront(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIdentityPhotoReverse(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Org entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Org entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
