package com.android.tonight8.dao.entity;

import com.android.tonight8.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.android.tonight8.dao.MemberDao;
import com.android.tonight8.dao.OrgDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ORG.
 */
public class Org {

    private long id;
    private Long memberId;
    private String name;
    private String logo;
    private String pic;
    private String introduce;
    private String telephone;
    private String email;
    private String website;
    private String contactPerson;
    private String contactMobilePhone;
    private String paperPhoto;
    private String paperCode;
    private Integer identityType;
    private String identityCode;
    private String identityPhotoFront;
    private String identityPhotoReverse;
    private Integer followingCount;
    private Integer followersCount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient OrgDao myDao;

    private Member member;
    private Long member__resolvedKey;


    public Org() {
    }

    public Org(long id) {
        this.id = id;
    }

    public Org(long id, Long memberId, String name, String logo, String pic, String introduce, String telephone, String email, String website, String contactPerson, String contactMobilePhone, String paperPhoto, String paperCode, Integer identityType, String identityCode, String identityPhotoFront, String identityPhotoReverse, Integer followingCount, Integer followersCount) {
        this.id = id;
        this.memberId = memberId;
        this.name = name;
        this.logo = logo;
        this.pic = pic;
        this.introduce = introduce;
        this.telephone = telephone;
        this.email = email;
        this.website = website;
        this.contactPerson = contactPerson;
        this.contactMobilePhone = contactMobilePhone;
        this.paperPhoto = paperPhoto;
        this.paperCode = paperCode;
        this.identityType = identityType;
        this.identityCode = identityCode;
        this.identityPhotoFront = identityPhotoFront;
        this.identityPhotoReverse = identityPhotoReverse;
        this.followingCount = followingCount;
        this.followersCount = followersCount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrgDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getMemberId() {
        return memberId;
    }

    public void setMemberId(Long memberId) {
        this.memberId = memberId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getLogo() {
        return logo;
    }

    public void setLogo(String logo) {
        this.logo = logo;
    }

    public String getPic() {
        return pic;
    }

    public void setPic(String pic) {
        this.pic = pic;
    }

    public String getIntroduce() {
        return introduce;
    }

    public void setIntroduce(String introduce) {
        this.introduce = introduce;
    }

    public String getTelephone() {
        return telephone;
    }

    public void setTelephone(String telephone) {
        this.telephone = telephone;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getWebsite() {
        return website;
    }

    public void setWebsite(String website) {
        this.website = website;
    }

    public String getContactPerson() {
        return contactPerson;
    }

    public void setContactPerson(String contactPerson) {
        this.contactPerson = contactPerson;
    }

    public String getContactMobilePhone() {
        return contactMobilePhone;
    }

    public void setContactMobilePhone(String contactMobilePhone) {
        this.contactMobilePhone = contactMobilePhone;
    }

    public String getPaperPhoto() {
        return paperPhoto;
    }

    public void setPaperPhoto(String paperPhoto) {
        this.paperPhoto = paperPhoto;
    }

    public String getPaperCode() {
        return paperCode;
    }

    public void setPaperCode(String paperCode) {
        this.paperCode = paperCode;
    }

    public Integer getIdentityType() {
        return identityType;
    }

    public void setIdentityType(Integer identityType) {
        this.identityType = identityType;
    }

    public String getIdentityCode() {
        return identityCode;
    }

    public void setIdentityCode(String identityCode) {
        this.identityCode = identityCode;
    }

    public String getIdentityPhotoFront() {
        return identityPhotoFront;
    }

    public void setIdentityPhotoFront(String identityPhotoFront) {
        this.identityPhotoFront = identityPhotoFront;
    }

    public String getIdentityPhotoReverse() {
        return identityPhotoReverse;
    }

    public void setIdentityPhotoReverse(String identityPhotoReverse) {
        this.identityPhotoReverse = identityPhotoReverse;
    }

    public Integer getFollowingCount() {
        return followingCount;
    }

    public void setFollowingCount(Integer followingCount) {
        this.followingCount = followingCount;
    }

    public Integer getFollowersCount() {
        return followersCount;
    }

    public void setFollowersCount(Integer followersCount) {
        this.followersCount = followersCount;
    }

    /** To-one relationship, resolved on first access. */
    public Member getMember() {
        Long __key = this.memberId;
        if (member__resolvedKey == null || !member__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MemberDao targetDao = daoSession.getMemberDao();
            Member memberNew = targetDao.load(__key);
            synchronized (this) {
                member = memberNew;
            	member__resolvedKey = __key;
            }
        }
        return member;
    }

    public void setMember(Member member) {
        synchronized (this) {
            this.member = member;
            memberId = member == null ? null : member.getId();
            member__resolvedKey = memberId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
