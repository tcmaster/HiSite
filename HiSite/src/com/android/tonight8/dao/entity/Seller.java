package com.android.tonight8.dao.entity;

import com.android.tonight8.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.android.tonight8.dao.MemberDao;
import com.android.tonight8.dao.SellerDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SELLER.
 */
public class Seller {

    private long id;
    private Long memberId;
    private String name;
    private String pic;
    private Integer gender;
    private Integer age;
    private Boolean mobilePhone;
    private String email;
    private Integer level;
    private String createTime;
    private String beGoodType;
    private Integer manageEventCount;
    private Integer saleAmountCount;
    private Integer audienceAmountCount;
    private Integer followingCount;
    private Integer followersCount;
    private Integer supportCount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SellerDao myDao;

    private Member member;
    private Long member__resolvedKey;


    public Seller() {
    }

    public Seller(long id) {
        this.id = id;
    }

    public Seller(long id, Long memberId, String name, String pic, Integer gender, Integer age, Boolean mobilePhone, String email, Integer level, String createTime, String beGoodType, Integer manageEventCount, Integer saleAmountCount, Integer audienceAmountCount, Integer followingCount, Integer followersCount, Integer supportCount) {
        this.id = id;
        this.memberId = memberId;
        this.name = name;
        this.pic = pic;
        this.gender = gender;
        this.age = age;
        this.mobilePhone = mobilePhone;
        this.email = email;
        this.level = level;
        this.createTime = createTime;
        this.beGoodType = beGoodType;
        this.manageEventCount = manageEventCount;
        this.saleAmountCount = saleAmountCount;
        this.audienceAmountCount = audienceAmountCount;
        this.followingCount = followingCount;
        this.followersCount = followersCount;
        this.supportCount = supportCount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSellerDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getMemberId() {
        return memberId;
    }

    public void setMemberId(Long memberId) {
        this.memberId = memberId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPic() {
        return pic;
    }

    public void setPic(String pic) {
        this.pic = pic;
    }

    public Integer getGender() {
        return gender;
    }

    public void setGender(Integer gender) {
        this.gender = gender;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public Boolean getMobilePhone() {
        return mobilePhone;
    }

    public void setMobilePhone(Boolean mobilePhone) {
        this.mobilePhone = mobilePhone;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public Integer getLevel() {
        return level;
    }

    public void setLevel(Integer level) {
        this.level = level;
    }

    public String getCreateTime() {
        return createTime;
    }

    public void setCreateTime(String createTime) {
        this.createTime = createTime;
    }

    public String getBeGoodType() {
        return beGoodType;
    }

    public void setBeGoodType(String beGoodType) {
        this.beGoodType = beGoodType;
    }

    public Integer getManageEventCount() {
        return manageEventCount;
    }

    public void setManageEventCount(Integer manageEventCount) {
        this.manageEventCount = manageEventCount;
    }

    public Integer getSaleAmountCount() {
        return saleAmountCount;
    }

    public void setSaleAmountCount(Integer saleAmountCount) {
        this.saleAmountCount = saleAmountCount;
    }

    public Integer getAudienceAmountCount() {
        return audienceAmountCount;
    }

    public void setAudienceAmountCount(Integer audienceAmountCount) {
        this.audienceAmountCount = audienceAmountCount;
    }

    public Integer getFollowingCount() {
        return followingCount;
    }

    public void setFollowingCount(Integer followingCount) {
        this.followingCount = followingCount;
    }

    public Integer getFollowersCount() {
        return followersCount;
    }

    public void setFollowersCount(Integer followersCount) {
        this.followersCount = followersCount;
    }

    public Integer getSupportCount() {
        return supportCount;
    }

    public void setSupportCount(Integer supportCount) {
        this.supportCount = supportCount;
    }

    /** To-one relationship, resolved on first access. */
    public Member getMember() {
        Long __key = this.memberId;
        if (member__resolvedKey == null || !member__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MemberDao targetDao = daoSession.getMemberDao();
            Member memberNew = targetDao.load(__key);
            synchronized (this) {
                member = memberNew;
            	member__resolvedKey = __key;
            }
        }
        return member;
    }

    public void setMember(Member member) {
        synchronized (this) {
            this.member = member;
            memberId = member == null ? null : member.getId();
            member__resolvedKey = memberId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
