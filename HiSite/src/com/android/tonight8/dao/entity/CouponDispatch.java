package com.android.tonight8.dao.entity;

import com.android.tonight8.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.android.tonight8.dao.CouponDispatchDao;
import com.android.tonight8.dao.CouponProvideDao;
import com.android.tonight8.dao.SubjectDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table COUPON_DISPATCH.
 */
public class CouponDispatch {

    private long id;
    private Long couponProvideId;
    private Long subjectId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CouponDispatchDao myDao;

    private CouponProvide couponProvide;
    private Long couponProvide__resolvedKey;

    private Subject subject;
    private Long subject__resolvedKey;


    public CouponDispatch() {
    }

    public CouponDispatch(long id) {
        this.id = id;
    }

    public CouponDispatch(long id, Long couponProvideId, Long subjectId) {
        this.id = id;
        this.couponProvideId = couponProvideId;
        this.subjectId = subjectId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCouponDispatchDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getCouponProvideId() {
        return couponProvideId;
    }

    public void setCouponProvideId(Long couponProvideId) {
        this.couponProvideId = couponProvideId;
    }

    public Long getSubjectId() {
        return subjectId;
    }

    public void setSubjectId(Long subjectId) {
        this.subjectId = subjectId;
    }

    /** To-one relationship, resolved on first access. */
    public CouponProvide getCouponProvide() {
        Long __key = this.couponProvideId;
        if (couponProvide__resolvedKey == null || !couponProvide__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CouponProvideDao targetDao = daoSession.getCouponProvideDao();
            CouponProvide couponProvideNew = targetDao.load(__key);
            synchronized (this) {
                couponProvide = couponProvideNew;
            	couponProvide__resolvedKey = __key;
            }
        }
        return couponProvide;
    }

    public void setCouponProvide(CouponProvide couponProvide) {
        synchronized (this) {
            this.couponProvide = couponProvide;
            couponProvideId = couponProvide == null ? null : couponProvide.getId();
            couponProvide__resolvedKey = couponProvideId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Subject getSubject() {
        Long __key = this.subjectId;
        if (subject__resolvedKey == null || !subject__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SubjectDao targetDao = daoSession.getSubjectDao();
            Subject subjectNew = targetDao.load(__key);
            synchronized (this) {
                subject = subjectNew;
            	subject__resolvedKey = __key;
            }
        }
        return subject;
    }

    public void setSubject(Subject subject) {
        synchronized (this) {
            this.subject = subject;
            subjectId = subject == null ? null : subject.getId();
            subject__resolvedKey = subjectId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
