package com.android.tonight8.dao.entity;

import com.android.tonight8.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.android.tonight8.dao.CouponProvideDao;
import com.android.tonight8.dao.EventDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table COUPON_PROVIDE.
 */
public class CouponProvide {

    private long id;
    private Integer type;
    private Integer value;
    private Long rid;
    private String content;
    private Integer provideNum;
    private Integer provideAll;
    private String dateRangeStart;
    private String dateRangeEnd;
    private String templatePic;
    private String publishTime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CouponProvideDao myDao;

    private Event event;
    private Long event__resolvedKey;


    public CouponProvide() {
    }

    public CouponProvide(long id) {
        this.id = id;
    }

    public CouponProvide(long id, Integer type, Integer value, Long rid, String content, Integer provideNum, Integer provideAll, String dateRangeStart, String dateRangeEnd, String templatePic, String publishTime) {
        this.id = id;
        this.type = type;
        this.value = value;
        this.rid = rid;
        this.content = content;
        this.provideNum = provideNum;
        this.provideAll = provideAll;
        this.dateRangeStart = dateRangeStart;
        this.dateRangeEnd = dateRangeEnd;
        this.templatePic = templatePic;
        this.publishTime = publishTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCouponProvideDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getValue() {
        return value;
    }

    public void setValue(Integer value) {
        this.value = value;
    }

    public Long getRid() {
        return rid;
    }

    public void setRid(Long rid) {
        this.rid = rid;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Integer getProvideNum() {
        return provideNum;
    }

    public void setProvideNum(Integer provideNum) {
        this.provideNum = provideNum;
    }

    public Integer getProvideAll() {
        return provideAll;
    }

    public void setProvideAll(Integer provideAll) {
        this.provideAll = provideAll;
    }

    public String getDateRangeStart() {
        return dateRangeStart;
    }

    public void setDateRangeStart(String dateRangeStart) {
        this.dateRangeStart = dateRangeStart;
    }

    public String getDateRangeEnd() {
        return dateRangeEnd;
    }

    public void setDateRangeEnd(String dateRangeEnd) {
        this.dateRangeEnd = dateRangeEnd;
    }

    public String getTemplatePic() {
        return templatePic;
    }

    public void setTemplatePic(String templatePic) {
        this.templatePic = templatePic;
    }

    public String getPublishTime() {
        return publishTime;
    }

    public void setPublishTime(String publishTime) {
        this.publishTime = publishTime;
    }

    /** To-one relationship, resolved on first access. */
    public Event getEvent() {
        Long __key = this.rid;
        if (event__resolvedKey == null || !event__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventDao targetDao = daoSession.getEventDao();
            Event eventNew = targetDao.load(__key);
            synchronized (this) {
                event = eventNew;
            	event__resolvedKey = __key;
            }
        }
        return event;
    }

    public void setEvent(Event event) {
        synchronized (this) {
            this.event = event;
            rid = event == null ? null : event.getId();
            event__resolvedKey = rid;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
