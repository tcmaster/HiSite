package com.android.tonight8.dao.entity;

import com.android.tonight8.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.android.tonight8.dao.WishDao;
import com.android.tonight8.dao.WishItemDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table WISH_ITEM.
 */
public class WishItem {

    private long id;
    private Long wishId;
    private Integer type;
    private Integer value;
    private String name;
    private String describe;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WishItemDao myDao;

    private Wish wish;
    private Long wish__resolvedKey;


    public WishItem() {
    }

    public WishItem(long id) {
        this.id = id;
    }

    public WishItem(long id, Long wishId, Integer type, Integer value, String name, String describe) {
        this.id = id;
        this.wishId = wishId;
        this.type = type;
        this.value = value;
        this.name = name;
        this.describe = describe;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWishItemDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getWishId() {
        return wishId;
    }

    public void setWishId(Long wishId) {
        this.wishId = wishId;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getValue() {
        return value;
    }

    public void setValue(Integer value) {
        this.value = value;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescribe() {
        return describe;
    }

    public void setDescribe(String describe) {
        this.describe = describe;
    }

    /** To-one relationship, resolved on first access. */
    public Wish getWish() {
        Long __key = this.wishId;
        if (wish__resolvedKey == null || !wish__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            WishDao targetDao = daoSession.getWishDao();
            Wish wishNew = targetDao.load(__key);
            synchronized (this) {
                wish = wishNew;
            	wish__resolvedKey = __key;
            }
        }
        return wish;
    }

    public void setWish(Wish wish) {
        synchronized (this) {
            this.wish = wish;
            wishId = wish == null ? null : wish.getId();
            wish__resolvedKey = wishId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
