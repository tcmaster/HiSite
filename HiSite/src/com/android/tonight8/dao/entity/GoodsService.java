package com.android.tonight8.dao.entity;

import com.android.tonight8.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.android.tonight8.dao.GoodsDao;
import com.android.tonight8.dao.GoodsServiceDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table GOODS_SERVICE.
 */
public class GoodsService {

    private long id;
    private Long goodsId;
    private Integer type;
    private String content;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GoodsServiceDao myDao;

    private Goods goods;
    private Long goods__resolvedKey;


    public GoodsService() {
    }

    public GoodsService(long id) {
        this.id = id;
    }

    public GoodsService(long id, Long goodsId, Integer type, String content) {
        this.id = id;
        this.goodsId = goodsId;
        this.type = type;
        this.content = content;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGoodsServiceDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getGoodsId() {
        return goodsId;
    }

    public void setGoodsId(Long goodsId) {
        this.goodsId = goodsId;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    /** To-one relationship, resolved on first access. */
    public Goods getGoods() {
        Long __key = this.goodsId;
        if (goods__resolvedKey == null || !goods__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GoodsDao targetDao = daoSession.getGoodsDao();
            Goods goodsNew = targetDao.load(__key);
            synchronized (this) {
                goods = goodsNew;
            	goods__resolvedKey = __key;
            }
        }
        return goods;
    }

    public void setGoods(Goods goods) {
        synchronized (this) {
            this.goods = goods;
            goodsId = goods == null ? null : goods.getId();
            goods__resolvedKey = goodsId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
