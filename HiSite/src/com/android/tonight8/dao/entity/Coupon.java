package com.android.tonight8.dao.entity;

import com.android.tonight8.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.android.tonight8.dao.CouponDao;
import com.android.tonight8.dao.CouponProvideDao;
import com.android.tonight8.dao.EventDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table COUPON.
 */
public class Coupon {

    private long id;
    private Long eventId;
    private Long couponProvideId;
    private Integer relateType;
    private Integer relateId;
    private Integer type;
    private String code;
    private Integer status;
    private String usedDateTime;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CouponDao myDao;

    private Event event;
    private Long event__resolvedKey;

    private CouponProvide couponProvide;
    private Long couponProvide__resolvedKey;


    public Coupon() {
    }

    public Coupon(long id) {
        this.id = id;
    }

    public Coupon(long id, Long eventId, Long couponProvideId, Integer relateType, Integer relateId, Integer type, String code, Integer status, String usedDateTime) {
        this.id = id;
        this.eventId = eventId;
        this.couponProvideId = couponProvideId;
        this.relateType = relateType;
        this.relateId = relateId;
        this.type = type;
        this.code = code;
        this.status = status;
        this.usedDateTime = usedDateTime;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCouponDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getEventId() {
        return eventId;
    }

    public void setEventId(Long eventId) {
        this.eventId = eventId;
    }

    public Long getCouponProvideId() {
        return couponProvideId;
    }

    public void setCouponProvideId(Long couponProvideId) {
        this.couponProvideId = couponProvideId;
    }

    public Integer getRelateType() {
        return relateType;
    }

    public void setRelateType(Integer relateType) {
        this.relateType = relateType;
    }

    public Integer getRelateId() {
        return relateId;
    }

    public void setRelateId(Integer relateId) {
        this.relateId = relateId;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public String getUsedDateTime() {
        return usedDateTime;
    }

    public void setUsedDateTime(String usedDateTime) {
        this.usedDateTime = usedDateTime;
    }

    /** To-one relationship, resolved on first access. */
    public Event getEvent() {
        Long __key = this.eventId;
        if (event__resolvedKey == null || !event__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventDao targetDao = daoSession.getEventDao();
            Event eventNew = targetDao.load(__key);
            synchronized (this) {
                event = eventNew;
            	event__resolvedKey = __key;
            }
        }
        return event;
    }

    public void setEvent(Event event) {
        synchronized (this) {
            this.event = event;
            eventId = event == null ? null : event.getId();
            event__resolvedKey = eventId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public CouponProvide getCouponProvide() {
        Long __key = this.couponProvideId;
        if (couponProvide__resolvedKey == null || !couponProvide__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CouponProvideDao targetDao = daoSession.getCouponProvideDao();
            CouponProvide couponProvideNew = targetDao.load(__key);
            synchronized (this) {
                couponProvide = couponProvideNew;
            	couponProvide__resolvedKey = __key;
            }
        }
        return couponProvide;
    }

    public void setCouponProvide(CouponProvide couponProvide) {
        synchronized (this) {
            this.couponProvide = couponProvide;
            couponProvideId = couponProvide == null ? null : couponProvide.getId();
            couponProvide__resolvedKey = couponProvideId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
