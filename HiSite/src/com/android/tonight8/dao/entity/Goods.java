package com.android.tonight8.dao.entity;

import com.android.tonight8.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.android.tonight8.dao.EventDao;
import com.android.tonight8.dao.GoodsDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table GOODS.
 */
public class Goods {

    private long id;
    private Long eventId;
    private String categroyCode;
    private String name;
    private Integer previewValue;
    private Integer currentValue;
    private Boolean isShippingFree;
    private Integer shippingPrice;
    private Integer limitNumber;
    private Integer saleCount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GoodsDao myDao;

    private Event event;
    private Long event__resolvedKey;


    public Goods() {
    }

    public Goods(long id) {
        this.id = id;
    }

    public Goods(long id, Long eventId, String categroyCode, String name, Integer previewValue, Integer currentValue, Boolean isShippingFree, Integer shippingPrice, Integer limitNumber, Integer saleCount) {
        this.id = id;
        this.eventId = eventId;
        this.categroyCode = categroyCode;
        this.name = name;
        this.previewValue = previewValue;
        this.currentValue = currentValue;
        this.isShippingFree = isShippingFree;
        this.shippingPrice = shippingPrice;
        this.limitNumber = limitNumber;
        this.saleCount = saleCount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGoodsDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getEventId() {
        return eventId;
    }

    public void setEventId(Long eventId) {
        this.eventId = eventId;
    }

    public String getCategroyCode() {
        return categroyCode;
    }

    public void setCategroyCode(String categroyCode) {
        this.categroyCode = categroyCode;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getPreviewValue() {
        return previewValue;
    }

    public void setPreviewValue(Integer previewValue) {
        this.previewValue = previewValue;
    }

    public Integer getCurrentValue() {
        return currentValue;
    }

    public void setCurrentValue(Integer currentValue) {
        this.currentValue = currentValue;
    }

    public Boolean getIsShippingFree() {
        return isShippingFree;
    }

    public void setIsShippingFree(Boolean isShippingFree) {
        this.isShippingFree = isShippingFree;
    }

    public Integer getShippingPrice() {
        return shippingPrice;
    }

    public void setShippingPrice(Integer shippingPrice) {
        this.shippingPrice = shippingPrice;
    }

    public Integer getLimitNumber() {
        return limitNumber;
    }

    public void setLimitNumber(Integer limitNumber) {
        this.limitNumber = limitNumber;
    }

    public Integer getSaleCount() {
        return saleCount;
    }

    public void setSaleCount(Integer saleCount) {
        this.saleCount = saleCount;
    }

    /** To-one relationship, resolved on first access. */
    public Event getEvent() {
        Long __key = this.eventId;
        if (event__resolvedKey == null || !event__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EventDao targetDao = daoSession.getEventDao();
            Event eventNew = targetDao.load(__key);
            synchronized (this) {
                event = eventNew;
            	event__resolvedKey = __key;
            }
        }
        return event;
    }

    public void setEvent(Event event) {
        synchronized (this) {
            this.event = event;
            eventId = event == null ? null : event.getId();
            event__resolvedKey = eventId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
