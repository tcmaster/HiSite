package com.android.tonight8.dao.entity;

import com.android.tonight8.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.android.tonight8.dao.VoteDao;
import com.android.tonight8.dao.VoteItemDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table VOTE_ITEM.
 */
public class VoteItem {

    private long id;
    private Long VoteId;
    private String name;
    private Integer voteCount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient VoteItemDao myDao;

    private Vote vote;
    private Long vote__resolvedKey;


    public VoteItem() {
    }

    public VoteItem(long id) {
        this.id = id;
    }

    public VoteItem(long id, Long VoteId, String name, Integer voteCount) {
        this.id = id;
        this.VoteId = VoteId;
        this.name = name;
        this.voteCount = voteCount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVoteItemDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getVoteId() {
        return VoteId;
    }

    public void setVoteId(Long VoteId) {
        this.VoteId = VoteId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getVoteCount() {
        return voteCount;
    }

    public void setVoteCount(Integer voteCount) {
        this.voteCount = voteCount;
    }

    /** To-one relationship, resolved on first access. */
    public Vote getVote() {
        Long __key = this.VoteId;
        if (vote__resolvedKey == null || !vote__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            VoteDao targetDao = daoSession.getVoteDao();
            Vote voteNew = targetDao.load(__key);
            synchronized (this) {
                vote = voteNew;
            	vote__resolvedKey = __key;
            }
        }
        return vote;
    }

    public void setVote(Vote vote) {
        synchronized (this) {
            this.vote = vote;
            VoteId = vote == null ? null : vote.getId();
            vote__resolvedKey = VoteId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
