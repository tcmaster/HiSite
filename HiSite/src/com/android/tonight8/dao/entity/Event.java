package com.android.tonight8.dao.entity;

import com.android.tonight8.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.android.tonight8.dao.EventDao;
import com.android.tonight8.dao.OrgDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table EVENT.
 */
public class Event {

    private long id;
    private Long orgId;
    private String name;
    private Integer status;
    private String timeRangeStart;
    private String timeRangeEnd;
    private String publishTime;
    private Long timeStamp;
    private String ruleDescription;
    private Integer winningLimit;
    private Integer applyCount;
    private Integer awardCount;
    private Integer awardShippingCount;
    private Integer orderCount;
    private Integer orderShippingCount;
    private Integer audienceCount;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EventDao myDao;

    private Org org;
    private Long org__resolvedKey;


    public Event() {
    }

    public Event(long id) {
        this.id = id;
    }

    public Event(long id, Long orgId, String name, Integer status, String timeRangeStart, String timeRangeEnd, String publishTime, Long timeStamp, String ruleDescription, Integer winningLimit, Integer applyCount, Integer awardCount, Integer awardShippingCount, Integer orderCount, Integer orderShippingCount, Integer audienceCount) {
        this.id = id;
        this.orgId = orgId;
        this.name = name;
        this.status = status;
        this.timeRangeStart = timeRangeStart;
        this.timeRangeEnd = timeRangeEnd;
        this.publishTime = publishTime;
        this.timeStamp = timeStamp;
        this.ruleDescription = ruleDescription;
        this.winningLimit = winningLimit;
        this.applyCount = applyCount;
        this.awardCount = awardCount;
        this.awardShippingCount = awardShippingCount;
        this.orderCount = orderCount;
        this.orderShippingCount = orderShippingCount;
        this.audienceCount = audienceCount;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEventDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Long getOrgId() {
        return orgId;
    }

    public void setOrgId(Long orgId) {
        this.orgId = orgId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public String getTimeRangeStart() {
        return timeRangeStart;
    }

    public void setTimeRangeStart(String timeRangeStart) {
        this.timeRangeStart = timeRangeStart;
    }

    public String getTimeRangeEnd() {
        return timeRangeEnd;
    }

    public void setTimeRangeEnd(String timeRangeEnd) {
        this.timeRangeEnd = timeRangeEnd;
    }

    public String getPublishTime() {
        return publishTime;
    }

    public void setPublishTime(String publishTime) {
        this.publishTime = publishTime;
    }

    public Long getTimeStamp() {
        return timeStamp;
    }

    public void setTimeStamp(Long timeStamp) {
        this.timeStamp = timeStamp;
    }

    public String getRuleDescription() {
        return ruleDescription;
    }

    public void setRuleDescription(String ruleDescription) {
        this.ruleDescription = ruleDescription;
    }

    public Integer getWinningLimit() {
        return winningLimit;
    }

    public void setWinningLimit(Integer winningLimit) {
        this.winningLimit = winningLimit;
    }

    public Integer getApplyCount() {
        return applyCount;
    }

    public void setApplyCount(Integer applyCount) {
        this.applyCount = applyCount;
    }

    public Integer getAwardCount() {
        return awardCount;
    }

    public void setAwardCount(Integer awardCount) {
        this.awardCount = awardCount;
    }

    public Integer getAwardShippingCount() {
        return awardShippingCount;
    }

    public void setAwardShippingCount(Integer awardShippingCount) {
        this.awardShippingCount = awardShippingCount;
    }

    public Integer getOrderCount() {
        return orderCount;
    }

    public void setOrderCount(Integer orderCount) {
        this.orderCount = orderCount;
    }

    public Integer getOrderShippingCount() {
        return orderShippingCount;
    }

    public void setOrderShippingCount(Integer orderShippingCount) {
        this.orderShippingCount = orderShippingCount;
    }

    public Integer getAudienceCount() {
        return audienceCount;
    }

    public void setAudienceCount(Integer audienceCount) {
        this.audienceCount = audienceCount;
    }

    /** To-one relationship, resolved on first access. */
    public Org getOrg() {
        Long __key = this.orgId;
        if (org__resolvedKey == null || !org__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OrgDao targetDao = daoSession.getOrgDao();
            Org orgNew = targetDao.load(__key);
            synchronized (this) {
                org = orgNew;
            	org__resolvedKey = __key;
            }
        }
        return org;
    }

    public void setOrg(Org org) {
        synchronized (this) {
            this.org = org;
            orgId = org == null ? null : org.getId();
            org__resolvedKey = orgId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
