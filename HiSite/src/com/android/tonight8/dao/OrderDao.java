package com.android.tonight8.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.tonight8.dao.entity.Goods;
import com.android.tonight8.dao.entity.User;

import com.android.tonight8.dao.entity.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDER.
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property GoodsId = new Property(1, Long.class, "goodsId", false, "GOODS_ID");
        public final static Property UserId = new Property(2, Long.class, "userId", false, "USER_ID");
        public final static Property Code = new Property(3, String.class, "code", false, "CODE");
        public final static Property GoodsNumber = new Property(4, Integer.class, "goodsNumber", false, "GOODS_NUMBER");
        public final static Property GoodsPrice = new Property(5, Integer.class, "goodsPrice", false, "GOODS_PRICE");
        public final static Property CouponPrice = new Property(6, Integer.class, "couponPrice", false, "COUPON_PRICE");
        public final static Property ExpressPrice = new Property(7, Integer.class, "expressPrice", false, "EXPRESS_PRICE");
        public final static Property ExpressStatus = new Property(8, Integer.class, "expressStatus", false, "EXPRESS_STATUS");
        public final static Property PayPrice = new Property(9, Integer.class, "payPrice", false, "PAY_PRICE");
        public final static Property PayStatus = new Property(10, Integer.class, "payStatus", false, "PAY_STATUS");
    };

    private DaoSession daoSession;


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDER' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'GOODS_ID' INTEGER," + // 1: goodsId
                "'USER_ID' INTEGER," + // 2: userId
                "'CODE' TEXT," + // 3: code
                "'GOODS_NUMBER' INTEGER," + // 4: goodsNumber
                "'GOODS_PRICE' INTEGER," + // 5: goodsPrice
                "'COUPON_PRICE' INTEGER," + // 6: couponPrice
                "'EXPRESS_PRICE' INTEGER," + // 7: expressPrice
                "'EXPRESS_STATUS' INTEGER," + // 8: expressStatus
                "'PAY_PRICE' INTEGER," + // 9: payPrice
                "'PAY_STATUS' INTEGER);"); // 10: payStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long goodsId = entity.getGoodsId();
        if (goodsId != null) {
            stmt.bindLong(2, goodsId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        Integer goodsNumber = entity.getGoodsNumber();
        if (goodsNumber != null) {
            stmt.bindLong(5, goodsNumber);
        }
 
        Integer goodsPrice = entity.getGoodsPrice();
        if (goodsPrice != null) {
            stmt.bindLong(6, goodsPrice);
        }
 
        Integer couponPrice = entity.getCouponPrice();
        if (couponPrice != null) {
            stmt.bindLong(7, couponPrice);
        }
 
        Integer expressPrice = entity.getExpressPrice();
        if (expressPrice != null) {
            stmt.bindLong(8, expressPrice);
        }
 
        Integer expressStatus = entity.getExpressStatus();
        if (expressStatus != null) {
            stmt.bindLong(9, expressStatus);
        }
 
        Integer payPrice = entity.getPayPrice();
        if (payPrice != null) {
            stmt.bindLong(10, payPrice);
        }
 
        Integer payStatus = entity.getPayStatus();
        if (payStatus != null) {
            stmt.bindLong(11, payStatus);
        }
    }

    @Override
    protected void attachEntity(Order entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // goodsId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // goodsNumber
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // goodsPrice
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // couponPrice
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // expressPrice
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // expressStatus
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // payPrice
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // payStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setGoodsId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoodsNumber(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setGoodsPrice(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCouponPrice(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setExpressPrice(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setExpressStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setPayPrice(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setPayStatus(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getGoodsDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM ORDER T");
            builder.append(" LEFT JOIN GOODS T0 ON T.'GOODS_ID'=T0.'ID'");
            builder.append(" LEFT JOIN USER T1 ON T.'USER_ID'=T1.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Order loadCurrentDeep(Cursor cursor, boolean lock) {
        Order entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Goods goods = loadCurrentOther(daoSession.getGoodsDao(), cursor, offset);
        entity.setGoods(goods);
        offset += daoSession.getGoodsDao().getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);

        return entity;    
    }

    public Order loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Order> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Order> list = new ArrayList<Order>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Order> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Order> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
