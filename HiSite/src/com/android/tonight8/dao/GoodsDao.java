package com.android.tonight8.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.tonight8.dao.entity.Event;

import com.android.tonight8.dao.entity.Goods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GOODS.
*/
public class GoodsDao extends AbstractDao<Goods, Long> {

    public static final String TABLENAME = "GOODS";

    /**
     * Properties of entity Goods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property EventId = new Property(1, Long.class, "eventId", false, "EVENT_ID");
        public final static Property CategroyCode = new Property(2, String.class, "categroyCode", false, "CATEGROY_CODE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property PreviewValue = new Property(4, Integer.class, "previewValue", false, "PREVIEW_VALUE");
        public final static Property CurrentValue = new Property(5, Integer.class, "currentValue", false, "CURRENT_VALUE");
        public final static Property IsShippingFree = new Property(6, Boolean.class, "isShippingFree", false, "IS_SHIPPING_FREE");
        public final static Property ShippingPrice = new Property(7, Integer.class, "shippingPrice", false, "SHIPPING_PRICE");
        public final static Property LimitNumber = new Property(8, Integer.class, "limitNumber", false, "LIMIT_NUMBER");
        public final static Property SaleCount = new Property(9, Integer.class, "saleCount", false, "SALE_COUNT");
    };

    private DaoSession daoSession;


    public GoodsDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GOODS' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'EVENT_ID' INTEGER," + // 1: eventId
                "'CATEGROY_CODE' TEXT," + // 2: categroyCode
                "'NAME' TEXT," + // 3: name
                "'PREVIEW_VALUE' INTEGER," + // 4: previewValue
                "'CURRENT_VALUE' INTEGER," + // 5: currentValue
                "'IS_SHIPPING_FREE' INTEGER," + // 6: isShippingFree
                "'SHIPPING_PRICE' INTEGER," + // 7: shippingPrice
                "'LIMIT_NUMBER' INTEGER," + // 8: limitNumber
                "'SALE_COUNT' INTEGER);"); // 9: saleCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GOODS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Goods entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long eventId = entity.getEventId();
        if (eventId != null) {
            stmt.bindLong(2, eventId);
        }
 
        String categroyCode = entity.getCategroyCode();
        if (categroyCode != null) {
            stmt.bindString(3, categroyCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Integer previewValue = entity.getPreviewValue();
        if (previewValue != null) {
            stmt.bindLong(5, previewValue);
        }
 
        Integer currentValue = entity.getCurrentValue();
        if (currentValue != null) {
            stmt.bindLong(6, currentValue);
        }
 
        Boolean isShippingFree = entity.getIsShippingFree();
        if (isShippingFree != null) {
            stmt.bindLong(7, isShippingFree ? 1l: 0l);
        }
 
        Integer shippingPrice = entity.getShippingPrice();
        if (shippingPrice != null) {
            stmt.bindLong(8, shippingPrice);
        }
 
        Integer limitNumber = entity.getLimitNumber();
        if (limitNumber != null) {
            stmt.bindLong(9, limitNumber);
        }
 
        Integer saleCount = entity.getSaleCount();
        if (saleCount != null) {
            stmt.bindLong(10, saleCount);
        }
    }

    @Override
    protected void attachEntity(Goods entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Goods readEntity(Cursor cursor, int offset) {
        Goods entity = new Goods( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // eventId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // categroyCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // previewValue
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // currentValue
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isShippingFree
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // shippingPrice
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // limitNumber
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // saleCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Goods entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setEventId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCategroyCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPreviewValue(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCurrentValue(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsShippingFree(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setShippingPrice(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLimitNumber(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setSaleCount(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Goods entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Goods entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEventDao().getAllColumns());
            builder.append(" FROM GOODS T");
            builder.append(" LEFT JOIN EVENT T0 ON T.'EVENT_ID'=T0.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Goods loadCurrentDeep(Cursor cursor, boolean lock) {
        Goods entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Event event = loadCurrentOther(daoSession.getEventDao(), cursor, offset);
        entity.setEvent(event);

        return entity;    
    }

    public Goods loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Goods> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Goods> list = new ArrayList<Goods>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Goods> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Goods> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
