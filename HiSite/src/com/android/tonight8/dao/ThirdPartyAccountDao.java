package com.android.tonight8.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.tonight8.dao.entity.ThirdPartyAccount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table THIRD_PARTY_ACCOUNT.
*/
public class ThirdPartyAccountDao extends AbstractDao<ThirdPartyAccount, Long> {

    public static final String TABLENAME = "THIRD_PARTY_ACCOUNT";

    /**
     * Properties of entity ThirdPartyAccount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property BindRole = new Property(1, Integer.class, "bindRole", false, "BIND_ROLE");
        public final static Property BindId = new Property(2, Long.class, "bindId", false, "BIND_ID");
        public final static Property Type = new Property(3, Integer.class, "type", false, "TYPE");
        public final static Property Account = new Property(4, String.class, "account", false, "ACCOUNT");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property IsGrant = new Property(6, Boolean.class, "isGrant", false, "IS_GRANT");
        public final static Property GrantCode = new Property(7, String.class, "grantCode", false, "GRANT_CODE");
    };


    public ThirdPartyAccountDao(DaoConfig config) {
        super(config);
    }
    
    public ThirdPartyAccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'THIRD_PARTY_ACCOUNT' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'BIND_ROLE' INTEGER," + // 1: bindRole
                "'BIND_ID' INTEGER," + // 2: bindId
                "'TYPE' INTEGER," + // 3: type
                "'ACCOUNT' TEXT," + // 4: account
                "'URL' TEXT," + // 5: url
                "'IS_GRANT' INTEGER," + // 6: isGrant
                "'GRANT_CODE' TEXT);"); // 7: grantCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'THIRD_PARTY_ACCOUNT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ThirdPartyAccount entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Integer bindRole = entity.getBindRole();
        if (bindRole != null) {
            stmt.bindLong(2, bindRole);
        }
 
        Long bindId = entity.getBindId();
        if (bindId != null) {
            stmt.bindLong(3, bindId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(5, account);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        Boolean isGrant = entity.getIsGrant();
        if (isGrant != null) {
            stmt.bindLong(7, isGrant ? 1l: 0l);
        }
 
        String grantCode = entity.getGrantCode();
        if (grantCode != null) {
            stmt.bindString(8, grantCode);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ThirdPartyAccount readEntity(Cursor cursor, int offset) {
        ThirdPartyAccount entity = new ThirdPartyAccount( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // bindRole
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // bindId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // account
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // isGrant
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // grantCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ThirdPartyAccount entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBindRole(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setBindId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAccount(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsGrant(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setGrantCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ThirdPartyAccount entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ThirdPartyAccount entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
