package com.android.tonight8.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.tonight8.dao.entity.MessageConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE_CONFIG.
*/
public class MessageConfigDao extends AbstractDao<MessageConfig, Long> {

    public static final String TABLENAME = "MESSAGE_CONFIG";

    /**
     * Properties of entity MessageConfig.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property FollowMe = new Property(1, Boolean.class, "followMe", false, "FOLLOW_ME");
        public final static Property SupportMe = new Property(2, Boolean.class, "supportMe", false, "SUPPORT_ME");
        public final static Property SponsorMe = new Property(3, Boolean.class, "sponsorMe", false, "SPONSOR_ME");
        public final static Property CommentMe = new Property(4, Boolean.class, "commentMe", false, "COMMENT_ME");
        public final static Property ReceiveOrg = new Property(5, Boolean.class, "receiveOrg", false, "RECEIVE_ORG");
        public final static Property ReciveSeller = new Property(6, Boolean.class, "reciveSeller", false, "RECIVE_SELLER");
        public final static Property ReciveUser = new Property(7, Boolean.class, "reciveUser", false, "RECIVE_USER");
        public final static Property ReciveFollower = new Property(8, Boolean.class, "reciveFollower", false, "RECIVE_FOLLOWER");
        public final static Property ReciveFollowing = new Property(9, Boolean.class, "reciveFollowing", false, "RECIVE_FOLLOWING");
    };


    public MessageConfigDao(DaoConfig config) {
        super(config);
    }
    
    public MessageConfigDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE_CONFIG' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'FOLLOW_ME' INTEGER," + // 1: followMe
                "'SUPPORT_ME' INTEGER," + // 2: supportMe
                "'SPONSOR_ME' INTEGER," + // 3: sponsorMe
                "'COMMENT_ME' INTEGER," + // 4: commentMe
                "'RECEIVE_ORG' INTEGER," + // 5: receiveOrg
                "'RECIVE_SELLER' INTEGER," + // 6: reciveSeller
                "'RECIVE_USER' INTEGER," + // 7: reciveUser
                "'RECIVE_FOLLOWER' INTEGER," + // 8: reciveFollower
                "'RECIVE_FOLLOWING' INTEGER);"); // 9: reciveFollowing
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE_CONFIG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MessageConfig entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Boolean followMe = entity.getFollowMe();
        if (followMe != null) {
            stmt.bindLong(2, followMe ? 1l: 0l);
        }
 
        Boolean supportMe = entity.getSupportMe();
        if (supportMe != null) {
            stmt.bindLong(3, supportMe ? 1l: 0l);
        }
 
        Boolean sponsorMe = entity.getSponsorMe();
        if (sponsorMe != null) {
            stmt.bindLong(4, sponsorMe ? 1l: 0l);
        }
 
        Boolean commentMe = entity.getCommentMe();
        if (commentMe != null) {
            stmt.bindLong(5, commentMe ? 1l: 0l);
        }
 
        Boolean receiveOrg = entity.getReceiveOrg();
        if (receiveOrg != null) {
            stmt.bindLong(6, receiveOrg ? 1l: 0l);
        }
 
        Boolean reciveSeller = entity.getReciveSeller();
        if (reciveSeller != null) {
            stmt.bindLong(7, reciveSeller ? 1l: 0l);
        }
 
        Boolean reciveUser = entity.getReciveUser();
        if (reciveUser != null) {
            stmt.bindLong(8, reciveUser ? 1l: 0l);
        }
 
        Boolean reciveFollower = entity.getReciveFollower();
        if (reciveFollower != null) {
            stmt.bindLong(9, reciveFollower ? 1l: 0l);
        }
 
        Boolean reciveFollowing = entity.getReciveFollowing();
        if (reciveFollowing != null) {
            stmt.bindLong(10, reciveFollowing ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MessageConfig readEntity(Cursor cursor, int offset) {
        MessageConfig entity = new MessageConfig( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // followMe
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // supportMe
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // sponsorMe
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // commentMe
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // receiveOrg
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // reciveSeller
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // reciveUser
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // reciveFollower
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // reciveFollowing
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MessageConfig entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setFollowMe(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setSupportMe(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setSponsorMe(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setCommentMe(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setReceiveOrg(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setReciveSeller(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setReciveUser(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setReciveFollower(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setReciveFollowing(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MessageConfig entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MessageConfig entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
