package com.android.tonight8.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.tonight8.dao.entity.Express;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EXPRESS.
*/
public class ExpressDao extends AbstractDao<Express, Long> {

    public static final String TABLENAME = "EXPRESS";

    /**
     * Properties of entity Express.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property SendId = new Property(2, Long.class, "sendId", false, "SEND_ID");
        public final static Property ExpressCompany = new Property(3, String.class, "expressCompany", false, "EXPRESS_COMPANY");
        public final static Property ExpressNumber = new Property(4, String.class, "expressNumber", false, "EXPRESS_NUMBER");
        public final static Property ShippingNumber = new Property(5, String.class, "shippingNumber", false, "SHIPPING_NUMBER");
    };


    public ExpressDao(DaoConfig config) {
        super(config);
    }
    
    public ExpressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EXPRESS' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'TYPE' INTEGER," + // 1: type
                "'SEND_ID' INTEGER," + // 2: sendId
                "'EXPRESS_COMPANY' TEXT," + // 3: expressCompany
                "'EXPRESS_NUMBER' TEXT," + // 4: expressNumber
                "'SHIPPING_NUMBER' TEXT);"); // 5: shippingNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EXPRESS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Express entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        Long sendId = entity.getSendId();
        if (sendId != null) {
            stmt.bindLong(3, sendId);
        }
 
        String expressCompany = entity.getExpressCompany();
        if (expressCompany != null) {
            stmt.bindString(4, expressCompany);
        }
 
        String expressNumber = entity.getExpressNumber();
        if (expressNumber != null) {
            stmt.bindString(5, expressNumber);
        }
 
        String shippingNumber = entity.getShippingNumber();
        if (shippingNumber != null) {
            stmt.bindString(6, shippingNumber);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Express readEntity(Cursor cursor, int offset) {
        Express entity = new Express( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // sendId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // expressCompany
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // expressNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // shippingNumber
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Express entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSendId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setExpressCompany(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExpressNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShippingNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Express entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Express entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
