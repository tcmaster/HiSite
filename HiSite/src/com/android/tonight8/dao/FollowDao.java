package com.android.tonight8.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.tonight8.dao.entity.Follow;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FOLLOW.
*/
public class FollowDao extends AbstractDao<Follow, Long> {

    public static final String TABLENAME = "FOLLOW";

    /**
     * Properties of entity Follow.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property FollowerRole = new Property(1, Integer.class, "followerRole", false, "FOLLOWER_ROLE");
        public final static Property FollowingRole = new Property(2, Integer.class, "followingRole", false, "FOLLOWING_ROLE");
        public final static Property FollowerId = new Property(3, Long.class, "followerId", false, "FOLLOWER_ID");
        public final static Property FollowingId = new Property(4, Long.class, "followingId", false, "FOLLOWING_ID");
    };


    public FollowDao(DaoConfig config) {
        super(config);
    }
    
    public FollowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FOLLOW' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'FOLLOWER_ROLE' INTEGER," + // 1: followerRole
                "'FOLLOWING_ROLE' INTEGER," + // 2: followingRole
                "'FOLLOWER_ID' INTEGER," + // 3: followerId
                "'FOLLOWING_ID' INTEGER);"); // 4: followingId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FOLLOW'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Follow entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Integer followerRole = entity.getFollowerRole();
        if (followerRole != null) {
            stmt.bindLong(2, followerRole);
        }
 
        Integer followingRole = entity.getFollowingRole();
        if (followingRole != null) {
            stmt.bindLong(3, followingRole);
        }
 
        Long followerId = entity.getFollowerId();
        if (followerId != null) {
            stmt.bindLong(4, followerId);
        }
 
        Long followingId = entity.getFollowingId();
        if (followingId != null) {
            stmt.bindLong(5, followingId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Follow readEntity(Cursor cursor, int offset) {
        Follow entity = new Follow( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // followerRole
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // followingRole
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // followerId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // followingId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Follow entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setFollowerRole(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFollowingRole(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setFollowerId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setFollowingId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Follow entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Follow entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
