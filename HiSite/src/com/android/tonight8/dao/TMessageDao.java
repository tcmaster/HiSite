package com.android.tonight8.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.tonight8.dao.entity.TMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TMESSAGE.
*/
public class TMessageDao extends AbstractDao<TMessage, Long> {

    public static final String TABLENAME = "TMESSAGE";

    /**
     * Properties of entity TMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property UserPic = new Property(1, String.class, "userPic", false, "USER_PIC");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property UserLastMessage = new Property(3, String.class, "userLastMessage", false, "USER_LAST_MESSAGE");
        public final static Property LastTime = new Property(4, Long.class, "lastTime", false, "LAST_TIME");
        public final static Property UserId = new Property(5, Long.class, "userId", false, "USER_ID");
    };


    public TMessageDao(DaoConfig config) {
        super(config);
    }
    
    public TMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TMESSAGE' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'USER_PIC' TEXT," + // 1: userPic
                "'USER_NAME' TEXT," + // 2: userName
                "'USER_LAST_MESSAGE' TEXT," + // 3: userLastMessage
                "'LAST_TIME' INTEGER," + // 4: lastTime
                "'USER_ID' INTEGER);"); // 5: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TMESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userPic = entity.getUserPic();
        if (userPic != null) {
            stmt.bindString(2, userPic);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String userLastMessage = entity.getUserLastMessage();
        if (userLastMessage != null) {
            stmt.bindString(4, userLastMessage);
        }
 
        Long lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindLong(5, lastTime);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(6, userId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TMessage readEntity(Cursor cursor, int offset) {
        TMessage entity = new TMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userPic
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userLastMessage
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // lastTime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserPic(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserLastMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLastTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setUserId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
