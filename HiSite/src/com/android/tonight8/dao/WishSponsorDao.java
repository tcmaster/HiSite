package com.android.tonight8.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.tonight8.dao.entity.Wish;
import com.android.tonight8.dao.entity.WishItem;

import com.android.tonight8.dao.entity.WishSponsor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WISH_SPONSOR.
*/
public class WishSponsorDao extends AbstractDao<WishSponsor, Long> {

    public static final String TABLENAME = "WISH_SPONSOR";

    /**
     * Properties of entity WishSponsor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property WishId = new Property(1, Long.class, "wishId", false, "WISH_ID");
        public final static Property WishItemId = new Property(2, Long.class, "wishItemId", false, "WISH_ITEM_ID");
        public final static Property Type = new Property(3, Integer.class, "type", false, "TYPE");
        public final static Property SponsorId = new Property(4, Integer.class, "sponsorId", false, "SPONSOR_ID");
        public final static Property Describe = new Property(5, String.class, "describe", false, "DESCRIBE");
        public final static Property ReplyDescribe = new Property(6, String.class, "replyDescribe", false, "REPLY_DESCRIBE");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
        public final static Property SponsorDate = new Property(8, String.class, "sponsorDate", false, "SPONSOR_DATE");
    };

    private DaoSession daoSession;


    public WishSponsorDao(DaoConfig config) {
        super(config);
    }
    
    public WishSponsorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WISH_SPONSOR' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'WISH_ID' INTEGER," + // 1: wishId
                "'WISH_ITEM_ID' INTEGER," + // 2: wishItemId
                "'TYPE' INTEGER," + // 3: type
                "'SPONSOR_ID' INTEGER," + // 4: sponsorId
                "'DESCRIBE' TEXT," + // 5: describe
                "'REPLY_DESCRIBE' TEXT," + // 6: replyDescribe
                "'STATUS' INTEGER," + // 7: status
                "'SPONSOR_DATE' TEXT);"); // 8: sponsorDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WISH_SPONSOR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WishSponsor entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long wishId = entity.getWishId();
        if (wishId != null) {
            stmt.bindLong(2, wishId);
        }
 
        Long wishItemId = entity.getWishItemId();
        if (wishItemId != null) {
            stmt.bindLong(3, wishItemId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(4, type);
        }
 
        Integer sponsorId = entity.getSponsorId();
        if (sponsorId != null) {
            stmt.bindLong(5, sponsorId);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(6, describe);
        }
 
        String replyDescribe = entity.getReplyDescribe();
        if (replyDescribe != null) {
            stmt.bindString(7, replyDescribe);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
 
        String sponsorDate = entity.getSponsorDate();
        if (sponsorDate != null) {
            stmt.bindString(9, sponsorDate);
        }
    }

    @Override
    protected void attachEntity(WishSponsor entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WishSponsor readEntity(Cursor cursor, int offset) {
        WishSponsor entity = new WishSponsor( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // wishId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // wishItemId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // sponsorId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // describe
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // replyDescribe
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // sponsorDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WishSponsor entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setWishId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setWishItemId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setSponsorId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDescribe(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReplyDescribe(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSponsorDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WishSponsor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WishSponsor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getWishDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getWishItemDao().getAllColumns());
            builder.append(" FROM WISH_SPONSOR T");
            builder.append(" LEFT JOIN WISH T0 ON T.'WISH_ID'=T0.'ID'");
            builder.append(" LEFT JOIN WISH_ITEM T1 ON T.'WISH_ITEM_ID'=T1.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected WishSponsor loadCurrentDeep(Cursor cursor, boolean lock) {
        WishSponsor entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Wish wish = loadCurrentOther(daoSession.getWishDao(), cursor, offset);
        entity.setWish(wish);
        offset += daoSession.getWishDao().getAllColumns().length;

        WishItem wishItem = loadCurrentOther(daoSession.getWishItemDao(), cursor, offset);
        entity.setWishItem(wishItem);

        return entity;    
    }

    public WishSponsor loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<WishSponsor> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<WishSponsor> list = new ArrayList<WishSponsor>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<WishSponsor> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<WishSponsor> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
