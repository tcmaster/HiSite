package com.android.tonight8.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.tonight8.dao.entity.Event;

import com.android.tonight8.dao.entity.CouponProvide;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COUPON_PROVIDE.
*/
public class CouponProvideDao extends AbstractDao<CouponProvide, Long> {

    public static final String TABLENAME = "COUPON_PROVIDE";

    /**
     * Properties of entity CouponProvide.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property Rid = new Property(1, Long.class, "rid", false, "RID");
        public final static Property Type = new Property(2, Integer.class, "type", false, "TYPE");
        public final static Property Value = new Property(3, Float.class, "value", false, "VALUE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property DispatchContent = new Property(5, String.class, "dispatchContent", false, "DISPATCH_CONTENT");
        public final static Property ProvideNumber = new Property(6, Integer.class, "provideNumber", false, "PROVIDE_NUMBER");
        public final static Property DispatchNumber = new Property(7, Integer.class, "dispatchNumber", false, "DISPATCH_NUMBER");
        public final static Property ProvideAll = new Property(8, Boolean.class, "provideAll", false, "PROVIDE_ALL");
        public final static Property IsLiveUse = new Property(9, Boolean.class, "isLiveUse", false, "IS_LIVE_USE");
        public final static Property DateRangeStart = new Property(10, String.class, "dateRangeStart", false, "DATE_RANGE_START");
        public final static Property DateRangeEnd = new Property(11, String.class, "dateRangeEnd", false, "DATE_RANGE_END");
        public final static Property TemplatePic = new Property(12, String.class, "templatePic", false, "TEMPLATE_PIC");
        public final static Property PublishTime = new Property(13, String.class, "publishTime", false, "PUBLISH_TIME");
    };

    private DaoSession daoSession;


    public CouponProvideDao(DaoConfig config) {
        super(config);
    }
    
    public CouponProvideDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COUPON_PROVIDE' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'RID' INTEGER," + // 1: rid
                "'TYPE' INTEGER," + // 2: type
                "'VALUE' REAL," + // 3: value
                "'CONTENT' TEXT," + // 4: content
                "'DISPATCH_CONTENT' TEXT," + // 5: dispatchContent
                "'PROVIDE_NUMBER' INTEGER," + // 6: provideNumber
                "'DISPATCH_NUMBER' INTEGER," + // 7: dispatchNumber
                "'PROVIDE_ALL' INTEGER," + // 8: provideAll
                "'IS_LIVE_USE' INTEGER," + // 9: isLiveUse
                "'DATE_RANGE_START' TEXT," + // 10: dateRangeStart
                "'DATE_RANGE_END' TEXT," + // 11: dateRangeEnd
                "'TEMPLATE_PIC' TEXT," + // 12: templatePic
                "'PUBLISH_TIME' TEXT);"); // 13: publishTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COUPON_PROVIDE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CouponProvide entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long rid = entity.getRid();
        if (rid != null) {
            stmt.bindLong(2, rid);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(3, type);
        }
 
        Float value = entity.getValue();
        if (value != null) {
            stmt.bindDouble(4, value);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String dispatchContent = entity.getDispatchContent();
        if (dispatchContent != null) {
            stmt.bindString(6, dispatchContent);
        }
 
        Integer provideNumber = entity.getProvideNumber();
        if (provideNumber != null) {
            stmt.bindLong(7, provideNumber);
        }
 
        Integer dispatchNumber = entity.getDispatchNumber();
        if (dispatchNumber != null) {
            stmt.bindLong(8, dispatchNumber);
        }
 
        Boolean provideAll = entity.getProvideAll();
        if (provideAll != null) {
            stmt.bindLong(9, provideAll ? 1l: 0l);
        }
 
        Boolean isLiveUse = entity.getIsLiveUse();
        if (isLiveUse != null) {
            stmt.bindLong(10, isLiveUse ? 1l: 0l);
        }
 
        String dateRangeStart = entity.getDateRangeStart();
        if (dateRangeStart != null) {
            stmt.bindString(11, dateRangeStart);
        }
 
        String dateRangeEnd = entity.getDateRangeEnd();
        if (dateRangeEnd != null) {
            stmt.bindString(12, dateRangeEnd);
        }
 
        String templatePic = entity.getTemplatePic();
        if (templatePic != null) {
            stmt.bindString(13, templatePic);
        }
 
        String publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindString(14, publishTime);
        }
    }

    @Override
    protected void attachEntity(CouponProvide entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CouponProvide readEntity(Cursor cursor, int offset) {
        CouponProvide entity = new CouponProvide( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // rid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // value
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dispatchContent
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // provideNumber
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // dispatchNumber
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // provideAll
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isLiveUse
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dateRangeStart
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // dateRangeEnd
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // templatePic
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // publishTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CouponProvide entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setRid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setValue(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDispatchContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProvideNumber(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDispatchNumber(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setProvideAll(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsLiveUse(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setDateRangeStart(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDateRangeEnd(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTemplatePic(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPublishTime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CouponProvide entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CouponProvide entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getEventDao().getAllColumns());
            builder.append(" FROM COUPON_PROVIDE T");
            builder.append(" LEFT JOIN EVENT T0 ON T.'RID'=T0.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CouponProvide loadCurrentDeep(Cursor cursor, boolean lock) {
        CouponProvide entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Event event = loadCurrentOther(daoSession.getEventDao(), cursor, offset);
        entity.setEvent(event);

        return entity;    
    }

    public CouponProvide loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CouponProvide> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CouponProvide> list = new ArrayList<CouponProvide>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CouponProvide> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CouponProvide> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
