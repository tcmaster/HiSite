package com.android.tonight8.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.android.tonight8.dao.entity.Member;

import com.android.tonight8.dao.entity.Seller;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SELLER.
*/
public class SellerDao extends AbstractDao<Seller, Long> {

    public static final String TABLENAME = "SELLER";

    /**
     * Properties of entity Seller.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property MemberId = new Property(1, Long.class, "memberId", false, "MEMBER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Pic = new Property(3, String.class, "pic", false, "PIC");
        public final static Property Gender = new Property(4, Integer.class, "gender", false, "GENDER");
        public final static Property Age = new Property(5, Integer.class, "age", false, "AGE");
        public final static Property MobilePhone = new Property(6, Boolean.class, "mobilePhone", false, "MOBILE_PHONE");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Level = new Property(8, Integer.class, "level", false, "LEVEL");
        public final static Property CreateTime = new Property(9, String.class, "createTime", false, "CREATE_TIME");
        public final static Property BeGoodType = new Property(10, String.class, "beGoodType", false, "BE_GOOD_TYPE");
        public final static Property ManageEventCount = new Property(11, Integer.class, "manageEventCount", false, "MANAGE_EVENT_COUNT");
        public final static Property SaleAmountCount = new Property(12, Integer.class, "saleAmountCount", false, "SALE_AMOUNT_COUNT");
        public final static Property AudienceAmountCount = new Property(13, Integer.class, "audienceAmountCount", false, "AUDIENCE_AMOUNT_COUNT");
        public final static Property FollowingCount = new Property(14, Integer.class, "followingCount", false, "FOLLOWING_COUNT");
        public final static Property FollowersCount = new Property(15, Integer.class, "followersCount", false, "FOLLOWERS_COUNT");
        public final static Property SupportCount = new Property(16, Integer.class, "supportCount", false, "SUPPORT_COUNT");
    };

    private DaoSession daoSession;


    public SellerDao(DaoConfig config) {
        super(config);
    }
    
    public SellerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SELLER' (" + //
                "'ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "'MEMBER_ID' INTEGER," + // 1: memberId
                "'NAME' TEXT," + // 2: name
                "'PIC' TEXT," + // 3: pic
                "'GENDER' INTEGER," + // 4: gender
                "'AGE' INTEGER," + // 5: age
                "'MOBILE_PHONE' INTEGER," + // 6: mobilePhone
                "'EMAIL' TEXT," + // 7: email
                "'LEVEL' INTEGER," + // 8: level
                "'CREATE_TIME' TEXT," + // 9: createTime
                "'BE_GOOD_TYPE' TEXT," + // 10: beGoodType
                "'MANAGE_EVENT_COUNT' INTEGER," + // 11: manageEventCount
                "'SALE_AMOUNT_COUNT' INTEGER," + // 12: saleAmountCount
                "'AUDIENCE_AMOUNT_COUNT' INTEGER," + // 13: audienceAmountCount
                "'FOLLOWING_COUNT' INTEGER," + // 14: followingCount
                "'FOLLOWERS_COUNT' INTEGER," + // 15: followersCount
                "'SUPPORT_COUNT' INTEGER);"); // 16: supportCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SELLER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Seller entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Long memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindLong(2, memberId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(4, pic);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(5, gender);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(6, age);
        }
 
        Boolean mobilePhone = entity.getMobilePhone();
        if (mobilePhone != null) {
            stmt.bindLong(7, mobilePhone ? 1l: 0l);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(9, level);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
 
        String beGoodType = entity.getBeGoodType();
        if (beGoodType != null) {
            stmt.bindString(11, beGoodType);
        }
 
        Integer manageEventCount = entity.getManageEventCount();
        if (manageEventCount != null) {
            stmt.bindLong(12, manageEventCount);
        }
 
        Integer saleAmountCount = entity.getSaleAmountCount();
        if (saleAmountCount != null) {
            stmt.bindLong(13, saleAmountCount);
        }
 
        Integer audienceAmountCount = entity.getAudienceAmountCount();
        if (audienceAmountCount != null) {
            stmt.bindLong(14, audienceAmountCount);
        }
 
        Integer followingCount = entity.getFollowingCount();
        if (followingCount != null) {
            stmt.bindLong(15, followingCount);
        }
 
        Integer followersCount = entity.getFollowersCount();
        if (followersCount != null) {
            stmt.bindLong(16, followersCount);
        }
 
        Integer supportCount = entity.getSupportCount();
        if (supportCount != null) {
            stmt.bindLong(17, supportCount);
        }
    }

    @Override
    protected void attachEntity(Seller entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Seller readEntity(Cursor cursor, int offset) {
        Seller entity = new Seller( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // memberId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pic
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // gender
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // age
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // mobilePhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // level
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // beGoodType
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // manageEventCount
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // saleAmountCount
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // audienceAmountCount
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // followingCount
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // followersCount
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16) // supportCount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Seller entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setMemberId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPic(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAge(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setMobilePhone(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLevel(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBeGoodType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setManageEventCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setSaleAmountCount(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setAudienceAmountCount(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setFollowingCount(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setFollowersCount(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setSupportCount(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Seller entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Seller entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMemberDao().getAllColumns());
            builder.append(" FROM SELLER T");
            builder.append(" LEFT JOIN MEMBER T0 ON T.'MEMBER_ID'=T0.'ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Seller loadCurrentDeep(Cursor cursor, boolean lock) {
        Seller entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Member member = loadCurrentOther(daoSession.getMemberDao(), cursor, offset);
        entity.setMember(member);

        return entity;    
    }

    public Seller loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Seller> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Seller> list = new ArrayList<Seller>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Seller> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Seller> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
